0.用例图[UseCase Diagrams]
=====================================================================================
1. 是谁用软件?
2. 软件的功能? 
3. 从用户的角度描述了系统的功能，并指出各个功能的执行者，强调用户的使用者，系统为执行者完成哪些功能。


A. 类图的常见组合：
=======================================================================================
1. 泛化
	A. 带三角的实线
	B. 继承

2. 关联
	A. 单向关联，双向关联, 是一种拥有的关系，它使一个类知道另一个类的属性和方法. -- 实线箭头
	B. n对n, 1对n
	c. 【成员变量】

3. 聚合 -- 较强的关联关系
	A. 部分可以离开整体而单独存在 -- 空心菱形箭头线
	B. 成员变量

4. 组合 -- 更强的关联关系
	A. 部分不可以离开整体而单独存在 -- 实心菱形箭头线
	B. 【成员变量】
	c. 要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期

5. 实现
	A. 带三角的虚线
	B. 接口

6，依赖	[使用关系]
	A. 带箭头的虚线, 即一个类的实现需要另一个类的协助，所以要尽量不使用双向的互相依赖.
	B. 【局部变量、方法的参数或者对静态方法的调用】

7. 各种关系的强弱顺序： 泛化 = 实现 > 组合 > 聚合 > 关联 > 依赖
	A. 虚线箭头: 依赖
	B. 实线箭头: 关联 < 聚合 < 组合  [棱形: 无法在语法上区分，只能在逻辑上区分]
		-- 聚合: 生命周期可不一致
		-- 组合: 生命周期一致
	C. 三角箭头: 泛化 = 实现

B. 对象图 [Object Diagrams] 
====================================================================================
1. 可以被看作是类图在某一时刻的实例


C. 状态图 [Statechart Diagrams]
===================================================================================
1. 描述类的对象所有可能的状态以及时间发生时状态的转移条件
2. 一种由状态、变迁、事件和活动组成的状态机。

D，活动图 [Activity Diagrams]
====================================================================================
1. 状态图的一种特殊情况，这些状态大都处于活动状态。本质是一种流程图，它描述了活动到活动的控制流。　　　　
2. 交互图强调的是对象到对象的控制流
3. 活动图则强调的是从活动到活动的控制流。
4. 可以用来对业务过程、工作流建模，也可以对用例实现甚至是程序实现来建模。
5. 带对象流的活动图 / 带泳道的活动图.

E. 序列图-时序图 [Sequence Diagrams]
====================================================================================
1. 交互图的一种，描述了对象之间消息发送的先后顺序，强调时间顺序。
2. 序列图的主要用途是把用例表达的需求，转化为进一步、更加正式层次的精细表达。

F. 协作图 [Collaboration Diagrams]
====================================================================================
1. 交互图的一种，描述了收发消息的对象的组织关系，强调对象之间的合作关系。时序图按照时间顺序布图，而写作图按照空间结构布图

G. 构件图（Component Diagrams）：
====================================================================================
1. 构件图是用来表示系统中构件与构件之间，类或接口与构件之间的关系图。
2. 构建图之间的关系表现为依赖关系，定义的类或接口与类之间的关系表现为依赖关系或实现关系。

H. 对比辨析 
====================================================================================
1. 序列图(时序图)VS协作图
	a. 序列图和协作图都是交互图。
		共同点：时序图与协作图均显示了对象间的交互。
		不同点：时序图强调交互的时间次序。
	            协作图强调交互的空间结构。

	b. 状态图VS活动图
		状态图和活动图都是行为图。状态图侧重从行为的结果来描述，活动图侧重从行为的动作来描述。
		状态图描述了一个具体对象的可能状态以及他们之间的转换。
		在实际的项目中，活动图并不是必须的，需要满足以下条件：1、出现并行过程&行为；2、描述算法；3、跨越多个用例的活动图。

	c. 活动图VS交互图
		交互图观察的是传送消息的对象，
		活动图观察的是对象之间传递的消息。他们从不同的角度来观察整个系统

F, 测试
==================================================================================
1. 单元测试: 类图
2. 集成测试: 类图，协作图，构件图
3。系统测试: 用例图

G. 总结：
====================================================================================
开发人员应该重点关注:
 1. 类图关系的描述有利于编码思路的实现 -- [代码结构-静态-可读可拓展可测试]
 2. 状态图: 状态变迁的上下界条件，推动事件 -- [代码结构-动态-边界流程是否正确]
 3. 时序图: 同步/异步问题 -- [流程控制-程序处理逻辑脉络]
 4. 对象图：类图在某一时刻的实例 -- [程序运行中的状态]

产品经理关注:
 1. 用例图

https://www.cnblogs.com/jiangds/p/6596595.html



