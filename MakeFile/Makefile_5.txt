总结：
静态模式
=============

	<targets ...>: <target-pattern>: <prereq-patterns ...>
            <commands>
            ...

    targets定义了一系列的目标文件，可以有通配符。是目标的一个集合。
    target-parrtern是指明了targets的模式，也就是的目标集模式。
    prereq-parrterns是目标的依赖模式，它对target-parrtern形成的模式再进行一次依赖目标的定义。

例子：
    objects = foo.o bar.o	#变量定义
    all: $(objects)			#目标依赖
    $(objects): %.o: %.c	#静态模式
            $(CC) -c $(CFLAGS) $< -o $@

上面的例子中，指明了我们的目标从$object中获取，“%.o”表明要所有以“.o”结尾的目标，也就是“foo.o bar.o”，也就是变量$object集合的模式，
而依赖模式“%.c”则取模式“%.o”的“%”，也就是“foo bar”，并为其加下“.c”的后缀，于是，我们的依赖目标就是“foo.c bar.c”。
而命令中的“$<”和“$@”则是自动化变量，“$<”表示所有的依赖目标集（也就是“foo.c bar.c”）
，“$@”表示目标集（也就是“foo.o bar.o”）。于是，上面的规则展开后等价于下面的规则：
    foo.o : foo.c
            $(CC) -c $(CFLAGS) foo.c -o foo.o
    bar.o : bar.c
            $(CC) -c $(CFLAGS) bar.c -o bar.o

试想，如果我们的“%.o”有几百个，那种我们只要用这种很简单的“静态模式规则”就可以写完一堆规则，实在是太有效率了

 files = foo.elc bar.o lose.o
    $(filter %.o,$(files)): %.o: %.c
            $(CC) -c $(CFLAGS) $< -o $@
    $(filter %.elc,$(files)): %.elc: %.el
            emacs -f batch-byte-compile $<

$(filter %.o,$(files))表示调用Makefile的filter函数，过滤“$filter”集，只要其中模式为“%.o”的内容。

模式规则
=============


  sources = foo.c bar.c
  include $(sources:.c=.d)
上述语句中的“$(sources:.c=.d)”中的“.c=.d”的意思是做一个替换，把变量$(sources)所有[.c]的字串都替换成[.d]，
关于这个“替换”的内容，在后面我会有更为详细的讲述。当然，你得注意次序，因为include是按次来载入文件，最先载入的[.d]文件中的目标会成为默认目标。




六、多目标
Makefile的规则中的目标可以不止一个，其支持多目标，有可能我们的多个目标同时依赖于一个文件，并且其生成的命令大体类似。
于是我们就能把其合并起来。当然，多个目标的生成规则的执行命令是同一个，这可能会可我们带来麻烦，
不过好在我们的可以使用一个自动化变量“$@”（关于自动化变量，将在后面讲述），
这个变量表示着目前规则中所有的目标的集合，这样说可能很抽象，还是看一个例子吧。
    
	bigoutput littleoutput : text.g
            generate text.g -$(subst output,,$@) > $@
    
	上述规则等价于：
    
	bigoutput : text.g
            generate text.g -big > bigoutput
    littleoutput : text.g
            generate text.g -little > littleoutput
    
	其中，-$(subst output,,$@)中的“$”表示执行一个Makefile的函数，函数名为subst，后面的为参数。
	关于函数，将在后面讲述。这里的这个函数是截取字符串的意思，“$@”表示目标的集合，就像一个数组，“$@”依次取出目标，并执于命令。

七、静态模式
静态模式可以更加容易地定义多目标的规则，可以让我们的规则变得更加的有弹性和灵活。我们还是先来看一下语法：
    <targets ...>: <target-pattern>: <prereq-patterns ...>
            <commands>
            ...

    targets定义了一系列的目标文件，可以有通配符。是目标的一个集合。
    target-parrtern是指明了targets的模式，也就是的目标集模式。
    prereq-parrterns是目标的依赖模式，它对target-parrtern形成的模式再进行一次依赖目标的定义。

	这样描述这三个东西，可能还是没有说清楚，还是举个例子来说明一下吧。
	
	如果我们的<target-parrtern>定义成“%.o”，意思是我们的<target>集合中都是以“.o”结尾的，
	而如果我们的<prereq-parrterns>定义成“%.c”，意思是对<target-parrtern>所形成的目标集进行二次定义，
	其计算方法是，取<target-parrtern>模式中的“%”（也就是去掉了[.o]这个结尾），并为其加上[.c]这个结尾，形成的新集合。
	
所以，我们的“目标模式”或是“依赖模式”中都应该有“%”这个字符，如果你的文件名中有“%”那么你可以使用反斜杠“/”进行转义，来标明真实的“%”字符。
看一个例子：
    objects = foo.o bar.o
    all: $(objects)
    $(objects): %.o: %.c
            $(CC) -c $(CFLAGS) $< -o $@

上面的例子中，指明了我们的目标从$object中获取，“%.o”表明要所有以“.o”结尾的目标，也就是“foo.o bar.o”，也就是变量$object集合的模式，
而依赖模式“%.c”则取模式“%.o”的“%”，也就是“foo bar”，并为其加下“.c”的后缀，于是，我们的依赖目标就是“foo.c bar.c”。
而命令中的“$<”和“$@”则是自动化变量，“$<”表示所有的依赖目标集（也就是“foo.c bar.c”）
，“$@”表示目标集（也就是“foo.o bar.o”）。于是，上面的规则展开后等价于下面的规则：
    foo.o : foo.c
            $(CC) -c $(CFLAGS) foo.c -o foo.o
    bar.o : bar.c
            $(CC) -c $(CFLAGS) bar.c -o bar.o

试想，如果我们的“%.o”有几百个，那种我们只要用这种很简单的“静态模式规则”就可以写完一堆规则，实在是太有效率了。
“静态模式规则”的用法很灵活，如果用得好，那会一个很强大的功能。再看一个例子：

    files = foo.elc bar.o lose.o
    $(filter %.o,$(files)): %.o: %.c
            $(CC) -c $(CFLAGS) $< -o $@
    $(filter %.elc,$(files)): %.elc: %.el
            emacs -f batch-byte-compile $<

$(filter %.o,$(files))表示调用Makefile的filter函数，过滤“$filter”集，只要其中模式为“%.o”的内容。其的它内容，我就不用多说了吧。这个例字展示了Makefile中更大的弹性。

八、自动生成依赖性
在Makefile中，我们的依赖关系可能会需要包含一系列的头文件，比如，如果我们的main.c中有一句“#include "defs.h"”，那么我们的依赖关系应该是：
    main.o : main.c defs.h
但是，如果是一个比较大型的工程，你必需清楚哪些C文件包含了哪些头文件，
并且，你在加入或删除头文件时，也需要小心地修改Makefile，这是一个很没有维护性的工作。
为了避免这种繁重而又容易出错的事情，我们可以使用C/C++编译的一个功能。
大多数的C/C++编译器都支持一个“-M”的选项，即自动找寻源文件中包含的头文件，并生成一个依赖关系。

例如，如果我们执行下面的命令：
    cc -M main.c
其输出是：
    main.o : main.c defs.h
于是由编译器自动生成的依赖关系，这样一来，你就不必再手动书写若干文件的依赖关系，而由编译器自动生成了。
需要提醒一句的是，如果你使用GNU的C/C++编译器，你得用“-MM”参数，不然，“-M”参数会把一些标准库的头文件也包含进来。
    gcc -M main.c的输出是：
    main.o: main.c defs.h /usr/include/stdio.h /usr/include/features.h /
         /usr/include/sys/cdefs.h /usr/include/gnu/stubs.h /
         /usr/lib/gcc-lib/i486-suse-linux/2.95.3/include/stddef.h /
         /usr/include/bits/types.h /usr/include/bits/pthreadtypes.h /
         /usr/include/bits/sched.h /usr/include/libio.h /
         /usr/include/_G_config.h /usr/include/wchar.h /
         /usr/include/bits/wchar.h /usr/include/gconv.h /
         /usr/lib/gcc-lib/i486-suse-linux/2.95.3/include/stdarg.h /
         /usr/include/bits/stdio_lim.h

    gcc -MM main.c的输出则是：
    main.o: main.c defs.h
	
那么，编译器的这个功能如何与我们的Makefile联系在一起呢。
因为这样一来，我们的Makefile也要根据这些源文件重新生成，让Makefile自已依赖于源文件？
这个功能并不现实，不过我们可以有其它手段来迂回地实现这一功能。
GNU组织建议把编译器为每一个源文件的自动生成的依赖关系放到一个文件中，为每一个“name.c”的文件都生成一个“name.d”的Makefile文件，
[.d]文件中就存放对应[.c]文件的依赖关系。
于是，我们可以写出[.c]文件和[.d]文件的依赖关系，并让make自动更新或自成[.d]文件，并把其包含在我们的主Makefile中，
这样，我们就可以自动化地生成每个文件的依赖关系了。
这里，我们给出了一个模式规则来产生[.d]文件：
    %.d: %.c
            @set -e; rm -f $@; /
             $(CC) -M $(CPPFLAGS) $< > $@.
; /
             sed 's, /($*/)/.o[ :]*,/1.o $@ : ,g' < $@.
> $@; /
             rm -f $@.


这个规则的意思是，所有的[.d]文件依赖于[.c]文件，“rm -f $@”的意思是删除所有的目标，也就是[.d]文件，
第二行的意思是，为每个依赖文件“$<”，也就是[.c]文件生成依赖文件，“$@”表示模式“%.d”文件，如果有一个C文件是name.c，那么“%”就是“name”，
“”意为一个随机编号，第二行生成的文件有可能是“name.d.12345”，第三行使用sed命令做了一个替换，关于sed命令的用法请参看相关的使用文档。第四行就是删除临时文件。
总而言之，这个模式要做的事就是在编译器生成的依赖关系中加入[.d]文件的依赖，即把依赖关系：
    main.o : main.c defs.h
转成：
    main.o main.d : main.c defs.h
于是，我们的[.d]文件也会自动更新了，并会自动生成了，
当然，你还可以在这个[.d]文件中加入的不只是依赖关系，包括生成的命令也可一并加入
，让每个[.d]文件都包含一个完赖的规则。一旦我们完成这个工作，接下来，我们就要把这些自动生成的规则放进我们的主Makefile中。
我们可以使用Makefile的“include”命令，来引入别的Makefile文件（前面讲过），例如：
    sources = foo.c bar.c
    include $(sources:.c=.d)
上述语句中的“$(sources:.c=.d)”中的“.c=.d”的意思是做一个替换，把变量$(sources)所有[.c]的字串都替换成[.d]，关于这个“替换”的内容，在后面我会有更为详细的讲述。当然，你得注意次序，因为include是按次来载入文件，最先载入的[.d]文件中的目标会成为默认目标。