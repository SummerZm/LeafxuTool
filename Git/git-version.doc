/*************************************************************************
 > File Name: git-version.doc
 > Author: Leafxu
 > Created Time: Thu 31 May 2018 10:00:22 AM CST
 ************************************************************************/
 1. 功能简介
    a. 查看历史日志。 git -log  git log --pretty=online
    b. 回退上一个版本。 git reset --hard HEAD^
    c. 回退到某一个版本。git reset --hard commit_id
    d. 查看版本变更历史。git reflog
    e. git revert <commit_id>操作实现以退为进，
       

 2. 问题
    a. reset 与 revert的区别
        --->  git revert不会擦除"回退"之后的 commit_id ,而是正常的当做一次"commit"，产生一次新的操作记录，所以可以push，不会让你再pull
        --->  git reset 会擦除回退之后的commit_id, 导致本地仓库的记录树与远程仓库的记录树不一致，导致无法同步

    b. 撤销工作区的改变 (如果暂存区有记录，回退到暂存区版本；否则回退到当前master的版本)
        ---> git checkout -- file  ('--' 不能省略 )

    c. 撤销暂存区的改变
        ---> git reset HEAD file

    d. 撤销版本(回退版本：版本库+暂存区+工作区) 
        ---> git reset --hard HEAD^

    e. 撤销版本(回退版本：版本库+暂存区) 
        	--->  git reset HEAD^   
    
    f. 撤销版本(回退版本：版本库) 
        ---> git reset --soft HEAD^
 
3. 查看某个文件的版本信息：
	a. 查看最近一个版本: git blame filename            
	b. 查看某文件的一系列提交: git log -- filename
	c. 可以查看某次提交中的某个文件变化：git show commit_id filename
	d. 查看某次提交的中的变化: git show commit_id


4. 修改历史记录
    a. [初级:lastest version] --> git commit --amend -m "xxxx"
        git commit --amend --no-edit --date="Fri Nov 6 20:00:00 2015 -0600" 

    b. [中级] --> git rebase -i HEAD~3   修改最近3个提交记录  
		
		## 变基操作1
		pick:	保留该commit（缩写:p）
		reword:	保留该commit，但我需要修改该commit的注释（缩写:r）
		edit:	保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）
		squash:	将该commit和前一个commit合并（缩写:s）
		fixup	将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f）
		exec:	执行shell命令（缩写:x）
		drop:	我要丢弃该commit（缩写:d）
		最后退出，会提示是否保存, 回车就OK了
		
		## 变基操作2
		git checkout experiment  /* 检出本地experiment分支 */
		/* 
			在experiment分支上找和master分支共同祖先结点，然后以本地master为主依次合并；
			如果出现冲突需要,会自动停下来，要编辑器手动合并, 再执行git rebase --continue 
			或者 git rebase --abort

			如果要整合到远程分支上需要 git push --fore; 远程分支若受到保护，则要先去掉保护
		*/
		git rebase master		 

		相关链接1: https://gitbook.tw/chapters/github/using-force-push.html
		相关链接2: https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA

    c. [高级:branch] -->  git filter-branch --<各种filter>  命令 <修改范围>
        --msg-filter
        --tree-filter
        --env-filter

        eg: 修改邮箱
        git filter-branch --env-filter 'GIT_AUTHOR_EMAIL=john@example.com export GIT_AUTHOR_EMAIL' HEAD

    d. [使用远程分支覆盖本地分支]
        ```sh
        # 把远端代码下载到本地分支，不进行合并. 【A. 覆盖被修改的文件】
        git fetch --all      
        # 将代码重置到远程最新版本  【B. 删除本地增加的新文件】
        git reset --hard origin/master 
        # 进一步和远程分支同步
        git pull    
        ```

    e. [Git软件管理的两种方式]
        ```sh
        # A. 在本地远程管理
            1. 本地创建开发分支 dev
            2. 分支 dev 合并到 本地主干 master  
            3. 本地主干合并到远端主干 master

        # B. 在远端管理
            1. 远端有开发分支和master主干。 【开发分支可以是每个开发人员各自拥有一条】
            2. 开发人员同步远端自己开发分支，在本地自己开发，之后推到自己远端的开发分支机
            3. 专人或者自己把自己的远端分支合并到远端master主干, 并保证自己的开发与 主干的分支保持一致
	
		# 详见: git-work-flow.png
        ```

5. cherry-pick
    a. 分支A上提交了一个更新，需要在分支B上应用这个更新。这时可以使用cherry-pick
    b. 通过"git reflog"找到A上那个更新的SHA1哈希值，然后切换到B分支上使用"git cherry-pick 哈希值"。【可能需要自己解决冲突】

6. git rebase 用法二
    a.  原理：先将当前分支的HEAD引用指向目标分支和当前分支的共同祖先commit节点，然后将当前分支上的commit一个个apply到目标分支上，apply完以后再将HEAD引用指向当前分支。

7. Git不必要的merge简介
	a. 如何知道本地和远端分支一定不一致？  git status

	b. 你的本地和远端分支不一致如何处理?
		1. 情况一： 代码已经提交到远端【例如：早上那情况，远端分支也搞乱了】：  需求push --force 强行回退，整理时间线。
		2. 情况二： 代码没有提交，还在本地：
              A.  备份代码
              B.  git  reset --hard  某个版本
              C.  git pull  重新拉取自己远端开发分支代码
              D.  把A的备份代码过来覆盖，检查遗漏， 然后重新提交

	c. 为什么会本地和远端分支会不一致？
		1. 前天晚上合并了分支，第二天。开发人员没有git pull
		2. 自己拉了一条fengjunbranch分支,再合并到专属开发分支 【很容易造成不一致：老手要除外】(开发流混乱了)
		3. vscode 为了好看简洁，插件自己偷偷的执行了amend, 把本地的记录美化了，结果就是不一致 
		4. 电脑存在多个备份, git pull在备份A上执行， git push在备份B上执行导致








